import streamlit as st
import mysql.connector
import os
from datetime import datetime

# Load DB credentials from secrets.toml
DB_HOST = st.secrets["db"]["host"]
DB_NAME = st.secrets["db"]["name"]
DB_USER = st.secrets["db"]["user"]
DB_PASS = st.secrets["db"]["pass"]


# DB Connection
def get_db_connection():
    return mysql.connector.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASS,
        database=DB_NAME
    )

# Fetch demand list
def fetch_demands():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT ID, Name FROM Demand ORDER BY Name")
        demands = cursor.fetchall()
        cursor.close()
        conn.close()
        return demands
    except Exception as e:
        st.error(f"Error loading demands: {e}")
        return []

# Insert proposal
def insert_proposal(demand_id, proposal_file, proposal_file_name, date_received, proposal_status, comments):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO Proposal (DemandID, ProposalFile, ProposalFileName, DateReceived, ProposalStatus, Comments)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (demand_id, proposal_file, proposal_file_name, date_received, proposal_status, comments))
        conn.commit()
        cursor.close()
        conn.close()
        st.success("‚úÖ Proposal successfully uploaded and saved.")
    except Exception as e:
        st.error(f"‚ùå Error saving proposal: {e}")

# Fetch proposals for a demand
def fetch_proposals_by_demand(demand_id):
    try:
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("""
            SELECT ProposalFileName, DateReceived, ProposalStatus, Comments
            FROM Proposal
            WHERE DemandID = %s
            ORDER BY DateReceived DESC
        """, (demand_id,))
        proposals = cursor.fetchall()
        cursor.close()
        conn.close()
        return proposals
    except Exception as e:
        st.error(f"Error fetching proposals: {e}")
        return []

# --- Streamlit Layout ---
st.set_page_config(page_title="Proposal Registration", layout="centered")
st.title("üìë Proposal Registration")

# Load demands dynamically
demand_options = fetch_demands()
demand_map = {f"{name} (ID: {did})": did for did, name in demand_options}
selected_demand = st.selectbox("Select Demand", list(demand_map.keys()))

# Load previous proposals if a demand is selected
if selected_demand:
    demand_id = demand_map[selected_demand]
    st.markdown("### üìú Previous Proposals for This Demand")
    proposals = fetch_proposals_by_demand(demand_id)
    if proposals:
        st.dataframe(proposals, use_container_width=True)
    else:
        st.info("No proposals found for this demand.")
else:
    demand_id = None

# Proposal form
date_received = st.date_input("Proposal Received Date")
proposal_status = st.selectbox("Proposal Status", ["Pending", "Accepted", "Rejected"])
comments = st.text_area("Proposal Comments")
proposal_pdf = st.file_uploader("Upload Proposal PDF", type=["pdf"])

# Submit
if st.button("Submit Proposal"):
    if demand_id and date_received and proposal_status and comments and proposal_pdf:
        proposal_file = proposal_pdf.read()
        proposal_file_name = proposal_pdf.name
        insert_proposal(demand_id, proposal_file, proposal_file_name, date_received, proposal_status, comments)
    else:
        st.warning("üö® Please fill all fields and upload the proposal PDF.")
